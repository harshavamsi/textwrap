{"version":3,"file":"index_js.bootstrap.js","mappings":";;;;;;;;;;;AAAmF;;AAEnF;AACA;AACA;;AAEA;AACA,mEAAmE,iBAAiB;AACpF;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,SAAS,KAAK,WAAW;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6DAAa;AACrC;AACA;AACA;AACA;AACA,sBAAsB,2DAAW;AACjC,IAAI,qEAAiB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA,KAAK;AACL,CAAC;;;AAGD;AACA,+CAA+C,cAAc;AAC7D;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,MAAM;;AAErC;AACA,CAAC;;AAED;AACA;AACA;AACA","sources":["webpack://textwrap-wasm-demo-app/./index.js"],"sourcesContent":["import { draw_wrapped_text, WasmOptions, WasmPenalties } from \"textwrap-wasm-demo\";\n\nfetch(\"build-info.json\").then(response => response.json()).then(buildInfo => {\n    if (buildInfo.date && buildInfo.commit) {\n        document.getElementById(\"build-date\").innerText = buildInfo.date;\n\n        let link = document.createElement(\"a\");\n        link.href = `https://github.com/mgeisler/textwrap/commit/${buildInfo.commit}`;\n        link.innerText = buildInfo.commit.slice(0, 7);\n        document.getElementById(\"build-commit\").replaceWith(link);\n    }\n})\n\nfunction redraw(event) {\n    let fontSize = document.getElementById(\"font-size\").valueAsNumber;\n    let fontFamily = document.getElementById(\"font-family\").value;\n    let canvas = document.getElementById(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.font = `${fontSize}px ${fontFamily}`;\n\n    let text = document.getElementById(\"text\").value;\n    let lineWidth = document.getElementById(\"line-width\").valueAsNumber;\n    let breakWords = document.getElementById(\"break-words\").checked;\n    let wordSeparator = document.getElementById(\"word-separator\").value;\n    let wordSplitter = document.getElementById(\"word-splitter\").value;\n    let wrapAlgorithm = document.getElementById(\"wrap-algorithm\").value;\n    let penalties = new WasmPenalties(document.getElementById(\"nline-penalty\").valueAsNumber,\n                                      document.getElementById(\"overflow-penalty\").valueAsNumber,\n                                      document.getElementById(\"short-line-fraction\").valueAsNumber,\n                                      document.getElementById(\"short-last-line-penalty\").valueAsNumber,\n                                      document.getElementById(\"hyphen-penalty\").valueAsNumber);\n    let options = new WasmOptions(lineWidth, breakWords, wordSeparator, wordSplitter, wrapAlgorithm, penalties);\n    draw_wrapped_text(ctx, options, text, penalties);\n}\n\ndocument.getElementById(\"wrap-algorithm\").addEventListener(\"input\", (event) => {\n    let disablePenaltiesParams = (event.target.value == \"FirstFit\");\n    let rangeInputIds = [\"nline-penalty\",\n               \"overflow-penalty\",\n               \"short-line-fraction\",\n               \"short-last-line-penalty\",\n               \"hyphen-penalty\"];\n    rangeInputIds.forEach((rangeInputId) => {\n        let rangeInput = document.getElementById(rangeInputId);\n        let textInput = document.getElementById(`${rangeInputId}-text`);\n        rangeInput.disabled = disablePenaltiesParams;\n        textInput.disabled = disablePenaltiesParams;\n    });\n});\n\n\ndocument.querySelectorAll(\"input[type=range]\").forEach((rangeInput) => {\n    let textInput = document.getElementById(`${rangeInput.id}-text`);\n    textInput.min = rangeInput.min;\n    textInput.max = rangeInput.max;\n    textInput.value = rangeInput.value;\n\n    rangeInput.addEventListener(\"input\", (event) => {\n        textInput.value = rangeInput.valueAsNumber;\n    });\n    textInput.addEventListener(\"input\", (event) => {\n        rangeInput.value = textInput.valueAsNumber;\n    });\n});\n\ndocument.querySelectorAll(\"textarea, select, input\").forEach((elem) => {\n    elem.addEventListener(\"input\", redraw);\n});\n\nwindow.addEventListener(\"resize\", (event) => {\n    const X_OFFSET = 8;  // To accommodate the size of the slider knob.\n\n    let footer = document.getElementById(\"footer\");\n    let canvas = document.getElementById(\"canvas\");\n    let width = canvas.parentNode.clientWidth;\n\n    canvas.width = width;\n    canvas.height = footer.offsetTop - canvas.offsetTop;\n\n    let lineWidth = document.getElementById(\"line-width\");\n    let lineWidthText = document.getElementById(\"line-width-text\");\n    lineWidth.max = width - 2 * X_OFFSET;\n    lineWidthText.max = width - 2 * X_OFFSET;\n    lineWidth.style.width = `${width}px`;\n\n    redraw();\n});\n\nlet lineWidth = document.getElementById(\"line-width\");\nlet lineWidthText = document.getElementById(\"line-width-text\");\nlineWidthText.value = lineWidth.valueAsNumber;\nwindow.dispatchEvent(new Event('resize'));\n"],"names":[],"sourceRoot":""}